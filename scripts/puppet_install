#!/bin/bash

#set -x

# Global variables (in all caps) are set once here and never changed
VERBOSE=1
REPO_URL=https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
PUPPET=/opt/puppetlabs/bin/puppet
PUPPETSERVER=/opt/puppetlabs/bin/puppetserver
HOSTNAME=$(hostname)
DNS_ALT_NAMES=$( hostname -I | awk '{print $1}' )
BKUP_DIR=/backups
REQUIRED_PKGS_COMMON=( bind-utils \
                lsof \
              )
REQUIRED_PKGS_MASTER=( PyYAML )
REQUIRED_PKGS_AGENT=()

# Global variables that are set or modified by functions below
build_type=

function croak {
    echo "ERROR (${BASH_SOURCE[1]} [${BASH_LINENO[0]}] ${FUNCNAME[1]}) $*"
    exit 99
}


function continue_or_exit() {
    [[ -n "$1" ]] && echo "$1"
    shift
    local pause=60
    [[ -n "${1//[^0-9]/}" ]] && pause="${1//[^0-9]/}"
    echo "Continue?"
    local yn
    select yn in "Yes" "No"; do
        case $yn in
            Yes) return 0;;
            No ) exit 1;;
        esac
    done
}


function log() {
    [[ $VERBOSE -ne 1 ]] && return
    echo "INFO (${BASH_SOURCE[1]} [${BASH_LINENO[0]}] ${FUNCNAME[1]}) $*"
}


function assert_root() {
    log "enter..."
    [[ $EUID -eq 0 ]] || croak 'Must be root'
}


function process_cmdline() {
    log "enter..."
    [[ $# -eq 1 ]] || croak "Expected 1 argument, got '$#'"
    case "$1" in
        server|master)
            build_type=master
            ;;
        client|agent)
            build_type=agent
            ;;
        *)
            croak "Invalid build type: '$1'"
            ;;
    esac
}


function install_required_pkgs() {
    log "enter..."
    case "$build_type" in
        master)
            pkg_list=( "${REQUIRED_PKGS_COMMON[@]}" "${REQUIRED_PKGS_MASTER[@]}" )
            ;;
        agent)
            pkg_list=( "${REQUIRED_PKGS_COMMON[@]}" "${REQUIRED_PKGS_AGENT[@]}" )
            ;;
        *) croak "unknown build type '$build_type'"
    esac
    [[ ${#pkg_list[@]} -gt 0 ]] || croak "empty pkg list"
    yum install -y "${pkg_list[@]}" || croak "yum install returned non-zero"
}


function puppet_install {
    log "enter..."
    ls /etc/yum.repos.d/puppetlabs*.repo &>/dev/null \
    || yum -y install $REPO_URL

    local pkglist=()
    [[ "$build_type" == "master" ]] && pkglist+=( puppetserver )
    [[ "$build_type" == "agent" ]] && pkglist+=( puppet-agent )
    yum -y install "${pkglist[@]}"
}


function puppetdb_install {
    log "enter..."
    ls /etc/yum.repos.d/puppetlabs*.repo &>/dev/null \
    || yum -y install $REPO_URL

    $PUPPET module install -i /etc/puppetlabs/code/modules puppetlabs-puppetdb
    yum -y install puppet-client-tools
}


function restore_core {
    log "enter..."
    [[ "$build_type" != 'master' ]] && {
        log "nothing to do for build_type: '$build_type'"
        return
    }
    fn=$( ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1 )
    if [[ -z $fn ]] ; then
        echo "Cant find a puppet_config file in backup dir '$BKUP_DIR'"
        echo "This step will be skipped"
        continue_or_exit 
    else
        tar zxPf $fn -T - <<ENDHERE
/etc/puppetlabs/code
/etc/puppetlabs/puppetserver
ENDHERE
    fi
}


### TODO - why is this separate (ie: can it be combined in restore_core)?
function restore_config {
    log "enter..."
    fn=$( ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1 )
    [[ -n $fn ]] || croak "Cant find a puppet_config file in backup dir '$BKUP_DIR'"
    tar zxPf $fn -T - <<ENDHERE
/etc/puppetlabs/puppet/puppet.conf
/etc/puppetlabs/puppet/auth.conf
/etc/puppetlabs/puppet/autosign.conf
/etc/puppetlabs/puppet/hiera.yaml
ENDHERE
}


function adjust_config {
    log "enter..."
    case "$build_type" in
        master)
            $PUPPET config set storeconfigs false --section master
            $PUPPET config set reports store --section master
            ;;
        agent)
            log "nothing to do for build_type: '$build_type'"
            ;;
        *) croak "unknown build type '$build_type'"
    esac
}


function restore_ca {
    log "enter..."
    fn=$( ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1 )
    [[ -n $fn ]] || croak "Cant find a puppet_config file in backup dir '$BKUP_DIR'"
    tar zxPf $fn -T - <<ENDHERE
/etc/puppetlabs/puppet/ssl
ENDHERE

}


function restore_db {
    log "enter..."
    fn=$( ls -t $BKUP_DIR/*_puppet_db.tar.gz | head -1 )
    [[ -n $fn ]] || croak "Cant find a puppet_db file in backup dir '$BKUP_DIR'"
    $PUPPET db import $fn
}


function configure_ca {
    log "enter..."
    [[ "$build_type" != 'master' ]] && {
        log "nothing to do for build_type: '$build_type'"
        return 0
    }
    [[ -d /etc/puppetlabs/puppet/ssl/ca ]] && {
        log 'CA already configured, skipping.'
        return 0
    }
    $PUPPET cert list -a
    $PUPPET config set certname $HOSTNAME --section master
    $PUPPET certificate generate \
        ${DNS_ALT_NAMES:+--dns-alt-names $DNS_ALT_NAMES} \
        --ca-location local \
        $HOSTNAME
    $PUPPET cert sign $HOSTNAME --allow-dns-alt-names
    # don't know what this does, but puppetserver won't start otherwise
    $PUPPET certificate find $HOSTNAME --ca-location local &>/dev/null
}


function puppetserver {
    log "enter..."
    [[ "$build_type" != 'master' ]] && {
        log "nothing to do for build_type: '$build_type'"
        return 0
    }
    #local pupsrvc="$PUPPET resource service puppetserver"
    local action=$1
    case $action in
        *start|reload) 
                $PUPPETSERVER $action
                is_puppetserver_running || croak 'puppetserver not running'
                ;;
        stop)
                $PUPPETSERVER $action
                is_puppetserver_running && croak 'puppetserver still running'
                ;;
        *)
                croak "unknown action '$action'"
    esac
}


function is_puppetserver_running {
    log "enter..."
    lsof -i :8140 &>/dev/null || croak 'puppetserver failed to start'
}


function create_autosign {
    log "enter..."
    fn=$( $PUPPET config print autosign )
    [[ -f $fn ]] && return 0
    cat > $fn <<ENDHERE
*.ncsa.illinois.edu
*.lsst.ncsa.edu
ENDHERE
}


function site_manifest {
    # TODO - would this be different for master vs. agent?
    log "enter..."
    action=$1
    fn=$( $PUPPET config print manifest )/site.pp
    case $action in
        dummy)
                echo "notify{\"Nodename \${trusted['certname']}\":}" > $fn
                ;;
        update)
                echo "hiera_include('classes')" >> $fn
                ;;
        delete)
                rm $fn
                ;;
        *) croak "unknown action '$action'"
                ;;
    esac
}


function enc_create {
    log "enter..."
    case $build_type in
        master)
            $PUPPET config set node_terminus exec --section master
            $PUPPET config set external_nodes --section master
            ;;
        agent)
            $PUPPET config set node_terminus exec --section user
            $PUPPET config set external_nodes --section user
            ;;
    esac
}


function yaml_manifest {
    log "enter..."
    action=$1
    envpath=$( $PUPPET config print environmentpath | cut -d: -f1 )
    env=$( $PUPPET config print environment )
    dir=$envpath/$env/hieradata/nodes
    mkdir -p $dir
    fn=$dir/${HOSTNAME}.yaml
    case $action in
        create)
                cat >$fn <<ENDHERE
---
classes: 
    - puppetdb
    - puppetdb::master::config
ENDHERE
                ;;
        *) croak "unknown action '$action'"
                ;;
    esac
}


function agent_config {
    log "enter..."
    case $build_type in
        master)
            log "nothing to do for build_type: '$build_type'"
            ;;
        agent)
            #set custom puppet server (if environment variable PUPMASTER exists)
            [[ -n "$PUPMASTER" ]] && $PUPPET config set server "$PUPMASTER"
            ;;
        *)
            croak "Unknown build_type '$build_type'"
    esac
}


function agent_run {
    log "enter..."
    case $build_type in
        master)
            log "nothing to do for build_type: '$build_type'"
            ;;
        agent)
            $PUPPET agent --test
            ;;
        *)
            croak "Unknown build_type '$build_type'"
    esac
}


####################################################


assert_root
process_cmdline $*
install_required_pkgs
puppet_install
restore_core
restore_config
adjust_config
#restore_ca
configure_ca
#site_manifest dummy
#enc_create
puppetserver start
agent_config
#agent_run

# puppetdb has stability issues, not using anymore
#puppetdb_install

#site_manifest update
#yaml_manifest create
#puppetserver restart
#agent_run
##site_manifest delete

# Needed if running docker
exec bash
