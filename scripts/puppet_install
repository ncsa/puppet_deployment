#!/bin/bash

#set -x

# Global variables (in all caps) are set once here and never changed
VERBOSE=1
REPO_URL=https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
PUPPET=/opt/puppetlabs/bin/puppet
PUPPETSRVR=/opt/puppetlabs/bin/puppetserver
HOSTNAME=$(hostname)
DNS_ALT_NAMES=$( hostname -I | awk '{print $1}' )
BKUP_DIR=/backups
REQUIRED_PKGS_COMMON=( bind-utils lsof )
REQUIRED_PKGS_MASTER=( PyYAML )
REQUIRED_PKGS_AGENT=()

# Global variables that are set or modified by functions below
build_type=

die() {
    echo "ERROR (${BASH_SOURCE[1]} [${BASH_LINENO[0]}] ${FUNCNAME[1]}) $*"
    exit 99
}


warn() {
    echo "WARN (${BASH_SOURCE[1]} [${BASH_LINENO[0]}] ${FUNCNAME[1]}) $*"
}


log() {
    [[ $VERBOSE -ne 1 ]] && return
    echo "INFO (${BASH_SOURCE[1]} [${BASH_LINENO[0]}] ${FUNCNAME[1]}) $*"
}


continue_or_exit() {
    [[ -n "$1" ]] && echo "$1"
    shift
    local pause=60
    [[ -n "${1//[^0-9]/}" ]] && pause="${1//[^0-9]/}"
    echo "Continue?"
    local yn
    select yn in "Yes" "No"; do
        case $yn in
            Yes) return 0;;
            No ) exit 1;;
        esac
    done
}


assert_root() {
    log "enter..."
    [[ $EUID -eq 0 ]] || die 'Must be root'
}


assert_valid_buildtype() {
    # Check build_type
    case "$build_type" in
        master|agent)
            : #pass
            ;;
        *)
            die "Invalid build type: '$build_type'"
            ;;
    esac
}


process_cmdline() {
    log "enter..."
    if [[ $# -lt 1 ]] ; then
        # Require PUPBUILDTYPE
        [[ -z "$PUPBUILDTYPE" ]] && die "No parameters given and PUPBUILDTYPE is empty"
        build_type="$PUPBUILDTYPE"
        log "No cmdline parms found, using build_type=$build_type from env PUPBUILDTYPE"
    elif [[ $# -eq 1 ]] ; then
        # Check param for valid build type
        case "$1" in
            master|agent)
                build_type="$1"
                log "cmdline parm looks like a build_type, setting build_type=$build_type"
                ;;
            *)
                PUPCERTNAME="$1"
                warn "cmdline parm is not a valid build_type, using as PUPCERTNAME"
                [[ -z "$PUPBUILDTYPE" ]] && die "unknown build_type and env var PUPBUILDTYPE is empty"
                warn "using env var PUPBUILDTYPE for build_type"
                build_type=$build_type
                ;;
        esac
    elif [[ $# -eq 2 ]] ; then
        build_type="$1"
        PUPCERTNAME="$2"
    else 
        die "Expected 0,1 or 2 arguments, got '$#'"
    fi
    assert_valid_buildtype
    log "build_type=$build_type"
    [[ -n "$PUPCERTNAME" ]] \
    && log "PUPCERTNAME=$PUPCERTNAME" \
    || log "HOSTNAME=$HOSTNAME"
}


install_required_pkgs() {
    log "enter..."
    local pkg_list=( "${REQUIRED_PKGS_COMMON[@]}" )
    case "$build_type" in
        master)
            pkg_list+=( "${REQUIRED_PKGS_MASTER[@]}" )
            ;;
        agent)
            pkg_list+=( "${REQUIRED_PKGS_AGENT[@]}" )
            ;;
        *) die "unknown build type '$build_type'"
    esac
    [[ ${#pkg_list[@]} -gt 0 ]] || die "empty pkg list"
    yum install -y "${pkg_list[@]}" || die "yum install returned non-zero"
}


puppet_install() {
    log "enter..."
    ls /etc/yum.repos.d/puppetlabs*.repo &>/dev/null \
    || yum -y install $REPO_URL

    local pkglist
    case "$build_type" in
        master)
            pkglist=( puppetserver )
            ;;
        agent)
            pkglist=( puppet-agent )
            ;;
        *) die "unknown build type '$build_type'"
    esac
    yum -y install "${pkglist[@]}"
}


get_bkup_src() {
    ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1
}


restore_config() {
    log "enter..."
    case "$build_type" in
        master)
            fn=$( get_bkup_src )
            [[ -z "$fn" ]] && die "Cant find a puppet backup"
            tar zxPf "$fn" --overwrite -T - <<ENDHERE
/etc/puppetlabs/puppet/*.conf
/etc/puppetlabs/puppet/*.yaml
/etc/puppetlabs/puppetserver/
/etc/puppetlabs/code/config/
ENDHERE
            ;;
        agent)
            log "nothing to do for build_type: '$build_type'"
            ;;
        *) die "unknown build type '$build_type'"
    esac
}


disable_puppetdb() {
    log "enter..."
    case "$build_type" in
        master)
            $PUPPET config set storeconfigs false --section master
            $PUPPET config set reports store --section master
            for f in puppetdb.conf routes.yaml; do
                rm /etc/puppetlabs/puppet/"$f"
            done
            ;;
        agent)
            log "nothing to do for build_type: '$build_type'"
            ;;
        *) die "unknown build type '$build_type'"
    esac
}


restore_environments() {
    log "enter..."
    fn=$( get_bkup_src )
    [[ -z "$fn" ]] && die "Cant find a puppet backup"
    find /etc/puppetlabs/code/environments -delete
    tar zxPf "$fn" --overwrite -T - <<ENDHERE
/etc/puppetlabs/code/environments
ENDHERE
}


restore_ca() {
    log "enter..."
    fn=$( get_bkup_src )
    [[ -z "$fn" ]] && die "Cant find a puppet backup"
    tar zxPf "$fn" --overwrite -T - <<ENDHERE
/etc/puppetlabs/puppet/ssl
ENDHERE
}


configure_ca() {
    log "enter..."
    case "$build_type" in
        master)
            [[ -d /etc/puppetlabs/puppet/ssl/ca ]] && {
                log 'CA already configured, skipping.'
                return 0
            }
            $PUPPET cert list -a
            $PUPPET config set certname $HOSTNAME --section master
            $PUPPET certificate generate \
                ${DNS_ALT_NAMES:+--dns-alt-names $DNS_ALT_NAMES} \
                --ca-location local \
                $HOSTNAME
            $PUPPET cert sign $HOSTNAME --allow-dns-alt-names
            # don't know what this does, but puppetserver won't start otherwise
            $PUPPET certificate find $HOSTNAME --ca-location local &>/dev/null
            ;;
        agent)
            log "nothing to do for build_type: '$build_type'"
            ;;
        *) die "unknown build type '$build_type'"
    esac
}


puppetserver() {
    log "enter..."
    [[ "$build_type" != 'master' ]] && {
        log "nothing to do for build_type: '$build_type'"
        return 0
    }
    #local pupsrvc="$PUPPET resource service puppetserver"
    local action=$1
    case $action in
        *start|reload) 
                #$pupsrvc ensure=running
                $PUPPETSRVR $action
                is_puppetserver_running || die 'puppetserver not running'
                ;;
        stop)
                #$pupsrvc ensure=stopped
                $PUPPETSRVR $action
                is_puppetserver_running && die 'puppetserver still running'
                ;;
        *)
                die "unknown action '$action'"
    esac
}


is_puppetserver_running() {
    log "enter..."
    lsof -i :8140 &>/dev/null
}


create_autosign() {
    log "enter..."
    fn=$( $PUPPET config print autosign )
    [[ -f $fn ]] && return 0
    cat > $fn <<ENDHERE
*.ncsa.illinois.edu
*.lsst.ncsa.edu
ENDHERE
}


agent_config() {
    log "enter..."
    case $build_type in
        master)
            log "nothing to do for build_type: '$build_type'"
            ;;
        agent)
            #set custom puppet server (if environment variable PUPMASTER exists)
            [[ -n "$PUPMASTER" ]] && $PUPPET config set server "$PUPMASTER"
            [[ -n "$PUPCERTNAME" ]] && $PUPPET config set certname "$PUPCERTNAME"
            ;;
        *)
            die "Unknown build_type '$build_type'"
    esac
}


agent_run() {
    log "enter..."
    case $build_type in
        master)
            log "nothing to do for build_type: '$build_type'"
            ;;
        agent)
            $PUPPET agent --test
            ;;
        *)
            die "Unknown build_type '$build_type'"
    esac
}


####################################################


assert_root
process_cmdline $*
install_required_pkgs
puppet_install

#restore_config
#disable_puppetdb
#restore_ca

#configure_ca
#puppetserver start
#agent_config
#agent_run
