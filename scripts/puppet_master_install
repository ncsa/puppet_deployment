#!/bin/bash

set -x

REPO_URL=https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
REQUIRED_PKGS=( bind-utils \
                lsof \
              )
PUPPET=/opt/puppetlabs/bin/puppet
HOSTNAME=$(hostname)
MASTER_HOSTNAME=$HOSTNAME
#DNS_ALT_NAMES=puppet,puppet.lsst.ncsa.edu,adm01.lsst.ncsa.edu,lsst-adm01.ncsa.illinois.edu
AGENT_ENV=production
AGENT_SERVER=$HOSTNAME
AGENT_LOG=/root/puppet_agent.log.$(date "+%Y%m%dT%H%M%S")
APPLY_LOG=/root/puppet_apply.log.$(date "+%Y%m%dT%H%M%S")
BKUP_DIR=/backups

function croak {
    echo ERROR: $*
    exit 99
}


function continue_or_exit() {
    [[ -n "$1" ]] && echo "$1"
    echo "Continue?"
    local yn
    select yn in "Yes" "No"; do
        case $yn in
            Yes) return 0;;
            No ) exit 1;;
        esac
    done
}


function assert_root() {
    [[ $EUID -eq 0 ]] || croak 'Must be root'
}


function install_required_pkgs() {
    [[ ${#REQUIRED_PKGS[@]} -gt 0 ]] \
    && yum install -y "${REQUIRED_PKGS[@]}" \
    || croak "install required pkgs failed"
}


function puppet_install {
    ls /etc/yum.repos.d/puppetlabs*.repo &>/dev/null \
    || yum -y install $REPO_URL

    yum -y install puppetserver
}


function puppetdb_install {
    ls /etc/yum.repos.d/puppetlabs*.repo &>/dev/null \
    || yum -y install $REPO_URL

    $PUPPET module install -i /etc/puppetlabs/code/modules puppetlabs-puppetdb
    yum -y install puppet-client-tools
}


function restore_config_pre {
    fn=$( ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1 )
    if [[ -z $fn ]] ; then
        echo "Cant find a puppet_config file in backup dir '$BKUP_DIR'"
        echo "This step will be skipped"
        continue_or_exit 
    else
        tar zxPf $fn -T - <<ENDHERE
/etc/puppetlabs/code/config
/etc/puppetlabs/code/environments
/etc/puppetlabs/puppet/auth.conf
/etc/puppetlabs/puppet/autosign.conf
/etc/puppetlabs/puppet/ssl
ENDHERE
    fi
}


function restore_config_post {
    fn=$( ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1 )
    [[ -n $fn ]] || croak "Cant find a puppet_config file in backup dir '$BKUP_DIR'"
    tar zxPf $fn -T - <<ENDHERE
        /etc/puppetlabs/puppet/puppet.conf
ENDHERE
}


function restore_db {
    fn=$( ls -t $BKUP_DIR/*_puppet_db.tar.gz | head -1 )
    [[ -n $fn ]] || croak "Cant find a puppet_db file in backup dir '$BKUP_DIR'"
    $PUPPET db import $fn
}


function configure_ca {
    [[ -d /etc/puppetlabs/puppet/ssl/ca ]] && return 0
    $PUPPET cert list -a
    $PUPPET config set certname $MASTER_HOSTNAME --section master
    $PUPPET certificate generate \
        ${DNS_ALT_NAMES:+--dns-alt-names $DNS_ALT_NAMES} \
        --ca-location local \
        $MASTER_HOSTNAME
    $PUPPET cert sign $MASTER_HOSTNAME --allow-dns-alt-names
    # don't know what this does, but puppetserver won't start otherwise
    $PUPPET certificate find $MASTER_HOSTNAME --ca-location local &>/dev/null
}


function puppetserver {
    local pupsrvc="$PUPPET resource service puppetserver"
    local action=$1
    case $action in
        *start) $pupsrvc ensure=running
                is_puppetserver_running || croak 'puppetserver not running'
                ;;
          stop) $pupsrvc ensure=stopped
                is_puppetserver_running && croak 'puppetserver still running'
                ;;
        enable) $pupsrvc enable=true
                ;;
       disable) $pupsrvc enable=false
                ;;
            *) croak "unknown action '$action'"
    esac
}


function is_puppetserver_running {
    lsof -i :8140 &>/dev/null || croak 'puppetserver failed to start'
}


function create_autosign {
    fn=$( $PUPPET config print autosign )
    [[ -f $fn ]] && return 0
    cat > $fn <<ENDHERE
*.ncsa.illinois.edu
*.lsst.ncsa.edu
ENDHERE
}


function site_manifest {
    action=$1
    fn=$( $PUPPET config print manifest )/site.pp
    case $action in
        create)
                cat > $fn <<ENDHERE
node $HOSTNAME {
    notify { 'Hello World': withpath => true }
}
ENDHERE
                ;;
        update)
                echo "hiera_include('classes')" >> $fn
                ;;
        delete)
                rm $fn
                ;;
        *) croak "unknown action '$action'"
                ;;
    esac
}


function yaml_manifest {
    action=$1
    envpath=$( $PUPPET config print environmentpath | cut -d: -f1 )
    env=$( $PUPPET config print environment )
    dir=$envpath/$env/hieradata/nodes
    mkdir -p $dir
    fn=$dir/${HOSTNAME}.yaml
    case $action in
        create)
                cat >$fn <<ENDHERE
---
classes: 
    - puppetdb
    - puppetdb::master::config
ENDHERE
                ;;
        *) croak "unknown action '$action'"
                ;;
    esac
}


function agent_run {
    $PUPPET agent --test \
                  --server=$AGENT_SERVER \
                  --environment=$AGENT_ENV \
                  --logdest=$AGENT_LOG
}


####################################################


assert_root
install_required_pkgs
puppet_install
restore_config_pre
configure_ca
#site_manifest create
puppetserver start
#agent_run
#puppetdb_install
#site_manifest update
#yaml_manifest create
#puppetserver restart
#agent_run
##site_manifest delete
##restore_config_post

