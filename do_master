#!/bin/bash

DEBUG=0
VERBOSE=1
BASEDIR=.
DOCKERFILE=$BASEDIR/Dockerfile_PupMaster
SCRIPTDIR=$BASEDIR/scripts
BACKUPDIR=$HOME/backups/lsst-adm01
IMAGE_NAME='pupmaster'
WINDRIVE=
FUNCS=$BASEDIR/common_funcs.sh
NETNAME=puptestnet


[[ -f "$FUNCS" ]] || { echo "Cant find file '$FUNCS'"; exit 1
}
.  common_funcs.sh


function sanepath() {
    [[ $DEBUG -eq 1 ]] && set -x
    path=$( readlink -e "$1" )
    if [[ "${#WINDRIVE}" -gt 0 ]] ; then
        echo "$path" \
        | sed -e "s|^/mnt/$WINDRIVE/|${WINDRIVE^}:/|" \
        | sed -e 's|/|\\|g'
    else
        echo "$path"
    fi
}

action=
if [[ $DEBUG -eq 1 ]] ; then
    action=echo
    VERBOSE=1
fi
[[ $VERBOSE -eq 1 ]] && set -x

# Check if Docker is running on Windows
if docker info --format '{{json .OperatingSystem}}' | grep -qi windows; then
    readlink -e "$BASEDIR" | grep -q '^\/mnt\/[a-z]\/' \
    || croak "Unable to determine drive letter for dir paths for docker on windows"
    WINDRIVE=$( readlink -e "$BASEDIR" | cut -d/ -f3 )
    [[ ${#WINDRIVE} -ne 1 ]] && croak "Windrive '$WINDRIVE' length is not 1"
fi

# Build Pup Master Image
<$DOCKERFILE $action docker build -t $IMAGE_NAME - \
|| croak 'Docker build failed'

# Verify custom network exists
mk_user_net "$NETNAME"

# Run Pup Master Image
#$action docker run -itd --rm \
$action docker run -itd \
--mount "Type=bind,Source=$(sanepath $SCRIPTDIR),Destination=/scripts,readonly" \
--mount "Type=bind,Source=$(sanepath $BACKUPDIR),Destination=/backups,readonly" \
--network="$NETNAME" \
--hostname=puppet \
--name=puppetserver \
$IMAGE_NAME
