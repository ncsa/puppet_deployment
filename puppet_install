#!/bin/bash

BASEPATH=/root/puppet_deployment
INCLUDES=( \
    $BASEPATH/common_funcs.sh
)

for f in "${INCLUDES[@]}"; do
    [[ -f "$f" ]] || { echo "Cant include file '$f'"; exit 1
    }
    source  "$f"
done

# Global settings
PUPPET=/opt/puppetlabs/bin/puppet
PUPPETSRVR=/opt/puppetlabs/bin/puppetserver
PUPPET_REPO_URL=https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
HOSTNAME=$(hostname)
REQUIRED_PKGS_COMMON=( bind-utils lsof )
REQUIRED_PKGS_MASTER=( PyYAML )
REQUIRED_PKGS_AGENT=()

# Command line option defaults
VERBOSE=0
DEBUG=0
BKUP_DIR="${PUPBKUPDIR:-/backups}"
BUILD_TYPE="$PUPBUILDTYPE"           #master | agent (allow to be set by env var)
CONFIG_TYPE="$PUPCONFIGTYPE"         #new | restore | r10k (allow env var)
AGENT_CERTNAME="$PUPCERTNAME"        #allow override hostname
AGENT_PUPMASTER="$PUPMASTER"         #ip or valid DNS hostname of pupmaster
DNS_ALT_NAMES="$PUPCAALTNAMES"       #dns alt names for puppet certificate


###
# Process Command Line
###
while :; do
    case "$1" in
        -h|-\?|--help)
            echo "Usage: ${0##*/} [OPTIONS]"
            echo "Options:"
            echo "    -a                    (build an agent)"
            echo "    -A <AgentCertname>    (override certname, defaults to hostname)"
            echo "    -b <backup_dir>       (path to backup directory, containing *_puppet_config.tar.gz files)"
            echo "    -d                    (enable debug mode)"
            echo "    -D <dns_alt_names>    (Comma separated list of alternate names for puppet CA certificate)"
            echo "    -m                    (build a master)"
            echo "    -M <new|restore|r10k> (how to configure puppet master)"
            echo "    -P <Puppet Master IP> (IP or hostname of puppet master, used only for agent build type)"
            echo "    -v                    (enable verbose mode)"
            exit
            ;;
        -a) BUILD_TYPE=agent
            ;;
        -A) AGENT_CERTNAME="$2"
            shift
            ;;
        -b) BKUP_DIR="$2"
            shift
            ;;
        -d) VERBOSE=1
            DEBUG=1
            ;;
        -D) DNS_ALT_NAMES="$2"
            shift
            ;;
        -m) BUILD_TYPE=master
            ;;
        -M) CONFIG_TYPE="$2"
            shift
            ;;
        -P) AGENT_PUPMASTER="$2"
            shift
            ;;
        -v) VERBOSE=1
            ;;
        --) shift
            break
            ;;
        -?*)
            die "Invalid option: $1"
            ;;
        *)  break
            ;;
    esac
    shift
done

# assert valid build_type
case "$BUILD_TYPE" in
    master)
        # check config_type ... only relevant if build_type is MASTER
        if [[ " new restore r10k " =~ " $CONFIG_TYPE " ]]; then
            : #pass
        else
            die "Missing or invalid config type: '$CONFIG_TYPE' for puppet master"
        fi
        ;;
    agent)
        [[ -n "$AGENT_PUPMASTER" ]] || die 'Missing Pup Master IP or hostname'
        ;;
    *)
        die "Invalid build type '$BUILD_TYPE'"
        ;;
esac


###
# Functions
###


install_required_pkgs() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    local pkg_list=( "${REQUIRED_PKGS_COMMON[@]}" )
    case "$BUILD_TYPE" in
        master)
            pkg_list+=( "${REQUIRED_PKGS_MASTER[@]}" )
            ;;
        agent)
            pkg_list+=( "${REQUIRED_PKGS_AGENT[@]}" )
            ;;
    esac
    [[ ${#pkg_list[@]} -gt 0 ]] || die "empty pkg list"
    install_pkgs "${pkg_list[@]}" || die "error during pkg install"
}


install_puppet() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    ls /etc/yum.repos.d/puppetlabs*.repo &>/dev/null \
    || yum -y install $PUPPET_REPO_URL

    local pkglist
    case "$BUILD_TYPE" in
        master)
            pkglist=( puppetserver )
            ;;
        agent)
            pkglist=( puppet-agent )
            ;;
    esac
    yum -y install "${pkglist[@]}"
}


get_bkup_src() {
    ls -t $BKUP_DIR/*_puppet_config.tar.gz | head -1
}


restore_config() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    local fn=$( get_bkup_src )
    [[ -z "$fn" ]] && die "Cant find a puppet backup"
    tar zxPf "$fn" --overwrite -T - <<ENDHERE
/etc/puppetlabs/puppet/*.conf
/etc/puppetlabs/puppet/*.yaml
/etc/puppetlabs/puppetserver/
/etc/puppetlabs/code/config/
ENDHERE
}


disable_puppetdb() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    $PUPPET config set storeconfigs false --section master
    $PUPPET config set reports store --section master
    for f in puppetdb.conf routes.yaml; do
        rm /etc/puppetlabs/puppet/"$f"
    done
}


restore_environments() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    fn=$( get_bkup_src )
    [[ -z "$fn" ]] && die "Cant find a puppet backup"
    find /etc/puppetlabs/code/environments -delete
    tar zxPf "$fn" --overwrite -T - <<ENDHERE
/etc/puppetlabs/code/environments
ENDHERE
}


restore_ca() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    local fn=$( get_bkup_src )
    [[ -z "$fn" ]] && die "Cant find a puppet backup"
    tar zxPf "$fn" --overwrite -T - <<ENDHERE
/etc/puppetlabs/puppet/ssl
ENDHERE
}


configure_ca() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    [[ -d /etc/puppetlabs/puppet/ssl/ca ]] && {
        log 'CA already configured, skipping.'
        return 0
    }

    local ip_addrs=( $(hostname -I) )
    local all_alts=( "${ip_addrs[@]}" "$DNS_ALT_NAMES" )
    local alt_names=$( IFS=','; cat <<< "${all_alts[*]}" )
    $PUPPET cert list -a
    $PUPPET config set certname $HOSTNAME --section master
    $PUPPET certificate generate \
        --dns-alt-names $alt_names \
        --ca-location local \
        $HOSTNAME
    $PUPPET cert sign $HOSTNAME --allow-dns-alt-names
    # don't know what this does, but puppetserver won't start otherwise
    $PUPPET certificate find $HOSTNAME --ca-location local &>/dev/null
}


puppetserver() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    [[ "$BUILD_TYPE" != 'master' ]] && {
        log "nothing to do for build_type: '$BUILD_TYPE'"
        return 0
    }
    #local pupsrvc="$PUPPET resource service puppetserver"
    local action=$1
    case $action in
        *start|reload) 
                #$pupsrvc ensure=running
                $PUPPETSRVR $action
                is_puppetserver_running || die 'puppetserver not running'
                ;;
        stop)
                #$pupsrvc ensure=stopped
                $PUPPETSRVR $action
                is_puppetserver_running && die 'puppetserver still running'
                ;;
        *)
                die "unknown action '$action'"
    esac
}


is_puppetserver_running() {
    [[ "$DEBUG" -gt 0 ]] && set -x
    log "enter..."
    lsof -i :8140 &>/dev/null
}


create_autosign() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    local fn=$( $PUPPET config print autosign )
    [[ -f $fn ]] && return 0
    cat > $fn <<ENDHERE
*.ncsa.illinois.edu
*.lsst.ncsa.edu
ENDHERE
}


agent_config() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    $PUPPET config set server "$AGENT_PUPMASTER"
    [[ -n "$AGENT_CERTNAME" ]] && $PUPPET config set certname "$AGENT_CERTNAME"
}


agent_run() {
    log "enter..."
    [[ "$DEBUG" -gt 0 ]] && set -x
    $PUPPET agent --test
}


####################################################


# Always perform these steps
assert_root
install_required_pkgs
install_puppet

# Next steps depend on install type
case "$BUILD_TYPE" in
    master)
        case "$CONFIG_TYPE" in
            restore)
                restore_config
                disable_puppetdb
                restore_environments
                restore_ca
                ;;
            new)
                configure_ca
                create_autosign
                ;;
            r10k)
                restore_ca
                create_autosign
                ;;
        esac
        #puppetserver start
        #is_puppetserver_running
        ;;
    agent)
        agent_config
        #agent_run
        ;;
esac

